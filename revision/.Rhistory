ar.synch.levels.pip50.4 = lm(synch ~  country  + pigsgdp_lag4 + recsynch_lag1 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= "2010-07-01"))
ar.synch.levels.pip50.5 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2010-10-01")))
ar.synch.levels.pip50.6 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-01-01")))
ar.synch.levels.pip50.7 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-04-01")))
ar.synch.levels.pip50.8 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-07-01")))
ar.synch.levels.pip50.9 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-10-01")))
ar.synch.levels.pip50.10 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-01-01")))
ar.synch.levels.pip50.11 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-04-01")))
ar.synch.levels.pip50.12 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-07-01")))
ar.synch.levels.pip50.13 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-10-01")))
ar.synch.levels.pip50.14 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-01-01")))
ar.synch.levels.pip50.15 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-04-01")))
ar.synch.levels.pip50.16 = lm(synch ~ country + pigsgdp_lag4 + recsynch_lag1 + recsynch_lag3 +
recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_levels_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-07-01")))
# Generate now the predictions
for (mm in 1:dim(synch_levels_pip_forecast_data)[1]) {
if (mm %in% seq(2,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.1, newdata = synch_levels_pip_forecast_data[mm,c("recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:8])])
}
if (mm %in% seq(3,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.2, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(4,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.3, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(5,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.4, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(6,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.5, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(7,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.6, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(8,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.7, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(9,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.8, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(10,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.9, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(11,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.10, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(12,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.11, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(13,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.12, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(14,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.13, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(15,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.14, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
if (mm %in% seq(16,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.15, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
if (mm %in% seq(17,final.seq,len.seq)) {
synch_levels_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.levels.pip50.16, newdata = synch_levels_pip_forecast_data[mm,c("pigsgdp_lag4", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
}
synch_levels_pip_forecast_data = synch_levels_pip_forecast_data %>%
select(date, country, f_synch)
plot.fcast(synch_levels_pip_forecast_data)
ggsave("plots/fcast_synch_levels_pip.eps", width = 8, height = 6, units = "in", device = cairo_ps)
# SYNCH - SYNCH #
synch_synch_data_pip = read_excel(file.path(data_path, "synch_synch.xlsx")) %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-10-01"),
!country %in% c("slovakia")) %>%
select(!contains("zlb"))
synch_synch_data_pip = synch_synch_data_pip %>%
select(-uncert,-bop,-debttogdp,-gdp,-euribor,-inflation) %>%
mutate(d_belgium = ifelse(country == "belgium", 1 , 0),
d_finland = ifelse(country == "finland", 1 , 0),
d_france = ifelse(country == "france", 1 , 0),
d_germany = ifelse(country == "germany", 1 , 0),
d_greece = ifelse(country == "greece", 1 , 0),
d_ireland = ifelse(country == "ireland", 1 , 0),
d_italy = ifelse(country == "italy", 1 , 0),
d_netherlands = ifelse(country == "netherlands", 1 , 0),
d_portugal = ifelse(country == "portugal", 1 , 0),
d_spain = ifelse(country == "spain", 1 , 0),
d_slovenia = ifelse(country == "slovenia", 1 , 0)) %>%
mutate(d_2002 = ifelse(year == 2002, 1 , 0),
d_2003 = ifelse(year == 2003, 1 , 0),
d_2004 = ifelse(year == 2004, 1 , 0),
d_2005 = ifelse(year == 2005, 1 , 0),
d_2006 = ifelse(year == 2006, 1 , 0),
d_2007 = ifelse(year == 2007, 1 , 0),
d_2008 = ifelse(year == 2008, 1 , 0),
d_2009 = ifelse(year == 2009, 1 , 0),
d_2010 = ifelse(year == 2010, 1 , 0),
d_2011 = ifelse(year == 2011, 1 , 0),
d_2012 = ifelse(year == 2012, 1 , 0),
d_2013 = ifelse(year == 2013, 1 , 0)) %>%
select(-year, -pigs)
# Create the dataset
synch_synch_pip_forecast_data = synch_synch_data_pip %>%
filter(date >= as.Date("2009-10-01"))
synch_synch_pip_forecast_data = complete(synch_synch_pip_forecast_data, country, date) %>%
mutate(f_synch = NA)
# Create all the AR models #
# We need in total 16 models (we use up until the last_obs - 1 to forecast)
ar.synch.synch.pip50.1 = lm(synch ~ country + recsynch_lag4 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009, data = synch_synch_data_pip %>%
filter(date <= "2009-10-01"))
ar.synch.synch.pip50.2 = lm(synch ~  country  + recsynch_lag1 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= "2010-01-01"))
ar.synch.synch.pip50.3 = lm(synch ~  country  + recsynch_lag1 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= "2010-04-01"))
ar.synch.synch.pip50.4 = lm(synch ~  country  + recsynch_lag1 + synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= "2010-07-01"))
ar.synch.synch.pip50.5 = lm(synch ~ country + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 + synch_lag1 +
d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2010-10-01")))
ar.synch.synch.pip50.6 = lm(synch ~ country + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 + synch_lag1 +
d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-01-01")))
ar.synch.synch.pip50.7 = lm(synch ~ country + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 + synch_lag1 +
d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-04-01")))
ar.synch.synch.pip50.8 = lm(synch ~ country + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 + synch_lag1 +
d_2002 + d_2003 + d_2004 + d_2005 + d_2006 + d_2007 +
d_2008 + d_2009 + d_2010 + d_2011, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-07-01")))
ar.synch.synch.pip50.9 = lm(synch ~ country + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 + synch_lag1 +
d_2002 + d_2003 + d_2004 + d_2005 + d_2006 + d_2007 +
d_2008 + d_2009 + d_2010 + d_2011, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2011-10-01")))
ar.synch.synch.pip50.10 = lm(synch ~ country + pigsdebttogdp_lag1+ pigsdebttogdp_lag2+ pigsgdp_lag1+ pigssynch_lag2+
recsynch_lag1 +recsynch_lag3 +recsynch_lag4 +synch_lag1 +
d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-01-01")))
ar.synch.synch.pip50.11 = lm(synch ~ country + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 + synch_lag1 +
d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-04-01")))
ar.synch.synch.pip50.12 = lm(synch ~ country + pigsdebttogdp_lag4+ pigsgdp_lag1 + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 +
synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-07-01")))
ar.synch.synch.pip50.13 = lm(synch ~ country + pigsdebttogdp_lag3 + pigsgdp_lag1 + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 +
synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2012-10-01")))
ar.synch.synch.pip50.14 = lm(synch ~ country + pigsdebttogdp_lag3 + pigsgdp_lag1 + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 +
synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-01-01")))
ar.synch.synch.pip50.15 = lm(synch ~ country + pigsdebttogdp_lag3 + pigsgdp_lag1 + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 +
synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-04-01")))
ar.synch.synch.pip50.16 = lm(synch ~ country + pigsdebttogdp_lag3 + pigsgdp_lag1 + recsynch_lag1 + recsynch_lag3 + recsynch_lag4 +
synch_lag1 + d_2002+ d_2003+ d_2004+ d_2005+ d_2006+ d_2007+
d_2008+ d_2009+ d_2010 + d_2011 + d_2012 + d_2013, data = synch_synch_data_pip %>%
mutate(date = as.Date(date)) %>%
filter(date <= as.Date("2013-07-01")))
# Generate now the predictions
for (mm in 1:dim(synch_synch_pip_forecast_data)[1]) {
if (mm %in% seq(2,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.1, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:8])])
}
if (mm %in% seq(3,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.2, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(4,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.3, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(5,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.4, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(6,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.5, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:9])])
}
if (mm %in% seq(7,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.6, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(8,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.7, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(9,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.8, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(10,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.9, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:10])])
}
if (mm %in% seq(11,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.10, newdata = synch_synch_pip_forecast_data[mm,c("pigsdebttogdp_lag1", "pigsdebttogdp_lag2", "pigsgdp_lag1", "pigssynch_lag2", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(12,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.11, newdata = synch_synch_pip_forecast_data[mm,c("recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(13,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.12, newdata = synch_synch_pip_forecast_data[mm,c("pigsdebttogdp_lag4", "pigsgdp_lag1", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(14,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.13, newdata = synch_synch_pip_forecast_data[mm,c("pigsdebttogdp_lag3", "pigsgdp_lag1", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:11])])
}
if (mm %in% seq(15,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.14, newdata = synch_synch_pip_forecast_data[mm,c("pigsdebttogdp_lag3", "pigsgdp_lag1", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
if (mm %in% seq(16,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.15, newdata = synch_synch_pip_forecast_data[mm,c("pigsdebttogdp_lag3", "pigsgdp_lag1", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
if (mm %in% seq(17,final.seq,len.seq)) {
synch_synch_pip_forecast_data[mm,f_synch_index] =
predict(ar.synch.synch.pip50.16, newdata = synch_synch_pip_forecast_data[mm,c("pigsdebttogdp_lag3", "pigsgdp_lag1", "recsynch_lag1", "recsynch_lag3", "recsynch_lag4", "synch_lag1", "country", year_dummy_names[1:12])])
}
}
synch_synch_pip_forecast_data = synch_synch_pip_forecast_data %>%
select(date, country, f_synch)
plot.fcast(synch_synch_pip_forecast_data)
1e5
10000 == 1e05
10000 == 1e06
1e06
source("~/Documents/GitHub/crespo-fernandez-replication/revision/forecast_revision.R", echo=TRUE)
# Code to generate results for the revision
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(DescTools, tidyr, dplyr, readxl, ggplot2, lubridate, zoo, stringr,
xtable, stargazer, stats, Hmisc, plm)
# Load the necessary functions
func.files <- list.files(path = "funcs", pattern = "\\.R$", full.names = TRUE)
for (file in func.files) {
source(file)
}
# REVIEWER 1, COMMENT 5: Redo the forecasting exercise without the Covid period #
# Load the forecast results previously run (note that the previous results of Table 3 still hold)
rm(list = setdiff(ls(), lsf.str()))
load("data/forecast_theil_all.RData")
load("data/forecast_theil_synch_levels.RData")
load("data/forecast_theil_synch_synch.RData")
# Collect the data for all models without 2020
# Pooled AR(1) model
model.1 = only.2020(ar_forecast_data)
model.1.piigs = only.2020(ar_forecast_data.piigs)
model.1.nopiigs = only.2020(ar_forecast_data.nopiigs)
# Country-specific AR(1) model
model.2 = only.2020(ar.country.data)
model.2.piigs = only.2020(ar.country.data.piigs)
model.2.nopiigs = only.2020(ar.country.data.nopiigs)
# BMA (levels)
model.3 = only.2020(bma.synch.levels.forecast.data)
model.3.piigs = only.2020(bma.synch.levels.forecast.data.piigs)
model.3.nopiigs = only.2020(bma.synch.levels.forecast.data.nopiigs)
# BMA (synch)
model.4 = only.2020(bma.synch.synch.forecast.data)
model.4.piigs = only.2020(bma.synch.synch.forecast.data.piigs)
model.4.nopiigs = only.2020(bma.synch.synch.forecast.data.nopiigs)
# BMA (levels, PIP > 50%)
model.5 = only.2020(synch_levels_pip_forecast_data)
model.5.piigs = only.2020(synch_levels_pip_forecast_data.piigs)
model.5.nopiigs = only.2020(synch_levels_pip_forecast_data.nopiigs)
# BMA (synch, PIP > 50%)
model.6 = only.2020(synch_synch_pip_forecast_data)
model.6.piigs = only.2020(synch_synch_pip_forecast_data.piigs)
model.6.nopiigs = only.2020(synch_synch_pip_forecast_data.nopiigs)
# Create a list of the models
# With all countries
models.all <- list(model.1, model.2, model.3, model.4, model.5, model.6)
# With only PIIGS countries
models.piigs <- list(model.1.piigs, model.2.piigs, model.3.piigs, model.4.piigs,
model.5.piigs, model.6.piigs)
# With no PIIGS countries
models.nopiigs <- list(model.1.nopiigs, model.2.nopiigs, model.3.nopiigs, model.4.nopiigs,
model.5.nopiigs, model.6.nopiigs)
# Loop over the models and call dir.results for each one
for (model in models.all) {
cat(dir.results(model), "\n")
}
for (model in models.piigs) {
cat(dir.results(model), "\n")
}
for (model in models.nopiigs) {
cat(dir.results(model), "\n")
}
# REVIEWER 1, COMMENT 6: Add the Theil U statistic to the forecasting exercise #
# Generate Table 3 again adding the Theil U statistics
# Collect all the data in models again
# Pooled AR(1) model
model.1 = ar_forecast_data
model.1.piigs = ar_forecast_data.piigs
model.1.nopiigs = ar_forecast_data.nopiigs
# Country-specific AR(1) model
model.2 = ar.country.data
model.2.piigs = ar.country.data.piigs
model.2.nopiigs = ar.country.data.nopiigs
# BMA (levels)
model.3 = bma.synch.levels.forecast.data
model.3.piigs = bma.synch.levels.forecast.data.piigs
model.3.nopiigs = bma.synch.levels.forecast.data.nopiigs
# BMA (synch)
model.4 = bma.synch.synch.forecast.data
model.4.piigs = bma.synch.synch.forecast.data.piigs
model.4.nopiigs = bma.synch.synch.forecast.data.nopiigs
# BMA (levels, PIP > 50%)
model.5 = synch_levels_pip_forecast_data
model.5.piigs = synch_levels_pip_forecast_data.piigs
model.5.nopiigs = synch_levels_pip_forecast_data.nopiigs
# BMA (synch, PIP > 50%)
model.6 = synch_synch_pip_forecast_data
model.6.piigs = synch_synch_pip_forecast_data.piigs
model.6.nopiigs = synch_synch_pip_forecast_data.nopiigs
# Create a list of the models
# With all countries
models.all <- list(model.1, model.2, model.3, model.4, model.5, model.6)
# With only PIIGS countries
models.piigs <- list(model.1.piigs, model.2.piigs, model.3.piigs, model.4.piigs,
model.5.piigs, model.6.piigs)
# With no PIIGS countries
models.nopiigs <- list(model.1.nopiigs, model.2.nopiigs, model.3.nopiigs, model.4.nopiigs,
model.5.nopiigs, model.6.nopiigs)
# Loop over the models and call dir.results for each one
for (model in models.all) {
cat(dir.results(model), "\n")
}
for (model in models.piigs) {
cat(dir.results(model), "\n")
}
for (model in models.nopiigs) {
cat(dir.results(model), "\n")
}
# REVIEWER 2, MINOR COMMENT 1: State-dependent synch
rm(list = setdiff(ls(), lsf.str()))
synch.data = read_excel("data/synch_levels.xlsx") %>%
select(date, country, synch, rec, zlb) %>%
mutate(draghi = ifelse(date >= '2012-07-01', 1, 0))
# Get unique country list
country.list = sort(unique(synch.data$country))
# Create three arrays for the results (recession, ZLB, Draghi)
rec.results = as.data.frame(cbind(country.list,
array(0, c(length(country.list),1))), row.names = F) %>%
rename(Country = country.list, Pval = V2)
# Note: for ZLB and Draghi is country.list-2 because Latvia and Lithuania was always either in ZLB or always in Draghi!
lv.lt.country.list = country.list[! country.list %in% c('latvia', 'lithuania')]
zlb.results = as.data.frame(cbind(lv.lt.country.list,
array(0, c(length(lv.lt.country.list),1))), row.names = F) %>%
rename(Country = lv.lt.country.list, Pval = V2)
draghi.results = as.data.frame(cbind(lv.lt.country.list,
array(0, c(length(lv.lt.country.list),1))), row.names = F) %>%
rename(Country = lv.lt.country.list, Pval = V2)
for (jj in 1:length(country.list)) {
rec.results[jj,2] = round(my.ttest(country.list[jj], rec)$p.value,5)
}
rec.results = rec.results %>%
mutate(Pval = as.numeric(Pval),
Significant = ifelse(Pval < 0.05, "Yes", "No"),
Country = str_to_title(Country))
rec.results
for (jj in 1:length(lv.lt.country.list)) {
zlb.results[jj,2] = round(my.ttest(lv.lt.country.list[jj], zlb)$p.value,5)
}
zlb.results = zlb.results %>%
mutate(Pval = as.numeric(Pval),
Significant = ifelse(Pval < 0.05, "Yes", "No"),
Country = str_to_title(Country))
zlb.results
for (jj in 1:length(lv.lt.country.list)) {
draghi.results[jj,2] = round(my.ttest(lv.lt.country.list[jj], draghi)$p.value,5)
}
draghi.results = draghi.results %>%
mutate(Pval = as.numeric(Pval),
Significant = ifelse(Pval < 0.05, "Yes", "No"),
Country = str_to_title(Country))
print(rec.results, row.names = F)
print(rec.results, row.names = F)
print(zlb.results, row.names = F)
print(draghi.results, row.names = F)
# Code to generate results for the revision
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(DescTools, tidyr, dplyr, readxl, ggplot2, lubridate, zoo, stringr,
xtable, stargazer, stats, Hmisc, plm)
# Load the necessary functions
func.files <- list.files(path = "funcs", pattern = "\\.R$", full.names = TRUE)
for (file in func.files) {
source(file)
}
# REVIEWER 1, COMMENT 5: Redo the forecasting exercise without the Covid period #
# Load the forecast results previously run (note that the previous results of Table 3 still hold)
rm(list = setdiff(ls(), lsf.str()))
load("data/forecast_theil_all.RData")
# Code to generate results for the revision
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(DescTools, tidyr, dplyr, readxl, ggplot2, lubridate, zoo, stringr,
xtable, stargazer, stats, Hmisc, plm)
# Load the necessary functions
func.files <- list.files(path = "funcs", pattern = "\\.R$", full.names = TRUE)
for (file in func.files) {
source(file)
}
# REVIEWER 1, COMMENT 5: Redo the forecasting exercise without the Covid period #
# Load the forecast results previously run (note that the previous results of Table 3 still hold)
rm(list=ls())
load("data/forecast_theil_all.RData")
rm(list=ls())
load("data/forecast_theil_synch_levels.RData")
rm(list=ls())
load("data/forecast_theil_all.RData")
View(bma.synch.levels.forecast.data.pip)
jeje = bma.synch.levels.forecast.data.pip %>% select(f_synch)
View(jeje)
